plugins {
	id 'maven-publish'
	alias libs.plugins.quilt.loom
}

archivesBaseName = project.archives_base_name
version = "${project.version}+${libs.versions.minecraft.get()}"
group = project.maven_group

loom {
	accessWidenerPath = file("src/main/resources/legemeton.accesswidener")
	runs {
		datagen {
			server()

			name = "Data Generation"
			runDir = "build/datagen"

			vmArg("-Dfabric-api.datagen")
			vmArg("-Dfabric-api.datagen.output-dir=${file("src/main/generated")}")
		}
	}
}

assemble.dependsOn(runDatagen)

sourceSets {
	main {
		resources {
			srcDirs += [
					"src/main/generated"
			]
		}
	}
}

repositories {
	maven {
		name "jitpack"
		url "https://jitpack.io"
	}
}

dependencies {
	minecraft libs.minecraft
	mappings variantOf(libs.quilt.mappings) { classifier 'intermediary-v2' }
	modImplementation libs.quilt.loader

	modImplementation libs.quilted.fabric.api

	//Fabric ASM
	modImplementation 'com.github.Chocohead:Fabric-ASM:v2.3'
	include 'com.github.Chocohead:Fabric-ASM:v2.3'
}

processResources {
	inputs.property 'version', version

	filesMatching('quilt.mod.json') {
		expand "version": version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = 'UTF-8'
	it.options.release = 17
}

java {
	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17

	withSourcesJar()
}

jar {
	filesMatching('LICENSE') {
		rename '^(LICENSE.*?)(\\..*)?$', "\$1_${archivesBaseName}\$2"
	}
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	repositories {
	}
}
